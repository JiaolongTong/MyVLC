//opencv
#pragma once

#include "Header.h"

class MaskFactory
{
public:
	/*
	* get background mask
	*/
	static Mat getBackgroundMask(Mat prev, Mat frame)
	{
		Mat fgMaskMOG; //fg mask fg mask generated by MOG2 method
		Ptr<BackgroundSubtractor> pMOG; //MOG2 Background subtractor
		pMOG = new BackgroundSubtractorMOG();
		pMOG->operator()(prev, fgMaskMOG);
		pMOG->operator()(frame, fgMaskMOG);
		return (255 - fgMaskMOG);
	}

	/*
	* create binary mask for the image based on canny edge detector
	*/
	static Mat getBinaryMask(Mat img)
	{
		int edgeThresh = 1;
		int lowThreshold = 10;
		int const max_lowThreshold = 100;
		int ratio = 3;
		int kernel_size = 3;
		Mat gray, detected_edges;
		/// Convert the image to grayscale
		cvtColor(img, gray, CV_BGR2GRAY);
		/// Reduce noise with a kernel 3x3
		blur(gray, detected_edges, Size(3, 3));
		/// Canny detector
		Canny(detected_edges, detected_edges, lowThreshold, lowThreshold*ratio, kernel_size);
		// 
		/// Using Canny's output as a mask, we display our result
		Mat dst = 255 + Mat::zeros(img.size(), CV_8UC1);
		dst = dst - detected_edges;
		/*Mat tmp;
		img.copyTo(tmp,dst);
		imshow("test", tmp);
		cv::waitKey(0);*/

		return dst;
	}
};